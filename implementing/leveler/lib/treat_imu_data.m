function [dq_ori, ...
          omega_world_base_world, ...
          accel_world_base_base] ...
          = treat_imu_data(d)

    % orientation dual quaternion
    q_ori_qp = quaternion([d.Orientation.W, ...
                        d.Orientation.X, ...
                        d.Orientation.Y, ...
                        d.Orientation.Z]);    
    dq_ori = DualQuaternion(q_ori_qp, quaternion([0, 0, 0, 0]));
    
    % dual velocity
    vec_vang_base_world = quaternion([0, d.AngularVelocity.X, ...
                         d.AngularVelocity.Y, ...
                         d.AngularVelocity.Z]);
                        
    omega_world_base_world = DualQuaternion(vec_vang_base_world, quaternion([0, 0, 0, 0]));
    
    % dual acceleration
    vec_acclin_world_base_world = quaternion([0, d.LinearAcceleration.X, ...
                                                d.LinearAcceleration.Y, ...
                                                d.LinearAcceleration.Z]);

    accel_world_base_base = DualQuaternion(quaternion([0, 0, 0, 0]), vec_acclin_world_base_world);
    
end

